// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id                  Int                   @id @unique(map: "sqlite_autoindex_user") @default(autoincrement())
  user_id             String                @unique(map: "sqlite_unique_userid") @default(cuid())
  user_name           String
  email               String                @unique
  password            String
  is_active           Boolean               @default(false)
  created_at          DateTime              @default(now()) @map(name: "created_at")
  updated_at          DateTime              @updatedAt @map(name: "updated_at")
  newsAndBlogComments NewsAndBlogComments[]

  @@map(name: "users")
}

model NewsAndBlog {
  id                  Int                   @id @unique(map: "sqlite_autoindex_newsAndBlog") @default(autoincrement())
  title               String
  type                String
  description         String?
  long_description    String?
  image_url           String?
  author_name         String
  tags                String
  publish_date        DateTime              @default(now()) @map(name: "publish_date")
  is_active           Boolean               @default(false)
  created_at          DateTime              @default(now()) @map(name: "created_at")
  updated_at          DateTime              @updatedAt @map(name: "updated_at")
  newsAndBlogComments NewsAndBlogComments[]

  @@map(name: "newsAndBlog")
}

model NewsAndBlogComments {
  id                Int          @id @unique(map: "sqlite_autoindex_newsAndBlog_comments") @default(autoincrement())
  message           String
  parent_comment_id Int?
  created_at        DateTime     @default(now()) @map(name: "created_at")
  newsAndBlog_id    Int
  newsAndBlog       NewsAndBlog? @relation(fields: [newsAndBlog_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_id           String
  user              User?        @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: Cascade)

  @@map(name: "newsAndBlog_comments")
}

model SubscribeNewsLetter {
  id         Int      @id @unique(map: "sqlite_autoindex_subscribeNewsLetter") @default(autoincrement())
  email      String
  created_at DateTime @default(now()) @map(name: "created_at")

  @@map(name: "subscribeNewsLetter")
}

model Casino {
  id            Int             @id @unique(map: "sqlite_autoindex_casino") @default(autoincrement())
  title         String
  sub_tile      String
  description   String
  image_url     String
  wizard_rating Decimal
  critic_score  Decimal
  is_active     Boolean         @default(false)
  created_at    DateTime        @default(now()) @map(name: "created_at")
  casinoReviews CasinoReviews[]

  @@map(name: "casino")
}

model CasinoReviews {
  id           Int      @id @unique(map: "sqlite_autoindex_casino_reviews") @default(autoincrement())
  reviews_type String
  rating       Decimal
  created_at   DateTime @default(now()) @map(name: "created_at")
  casino_id    Int
  casino       Casino?  @relation(fields: [casino_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map(name: "casino_reviews")
}
